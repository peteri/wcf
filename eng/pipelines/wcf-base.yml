jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishBuildAssets: true
    enablePublishUsingPipelines: $(_PublishUsingPipelines)
    enableTelemetry: true
    graphFileGeneration:
      enabled: true
      includeToolset: true
    helixRepo: dotnet/wcf
    variables:
    - _InternalBuildArgs: ''
    - HelixApiAccessToken: ''
    # Windows variables
    - ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
        - _Script: eng\common\cibuild.cmd
    # Unix variables
    - ${{ if ne(variables['Agent.OS'], 'Windows_NT') }}:
        - _Script: ./eng/common/cibuild.sh
    - _TestArgs: /p:ServiceUri=$(_serviceUri) /p:Root_Certificate_Installed=true /p:Client_Certificate_Installed=true /p:SSL_Available=true

    # Internal/Official Build Variables
    - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
        # Only enable publishing in non-public, non PR scenarios.
        # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
        # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
        # DotNet-HelixApi-Access provides: HelixApiAccessToken
        - group: DotNet-Blob-Feed
        - group: Publish-Build-Assets
        - group: DotNet-HelixApi-Access
        - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
        - _InternalBuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
            /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
            /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
            /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
            /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
            /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        # Service uri needed for integration tests in official builds
        - _serviceUri: wcfcoresrv5.cloudapp.net/wcftestservice1

    # Public/PR & CI Build Variables
    - ${{ if eq(parameters.isOfficialBuild, 'false') }}:
        # For PR and CI test runs we use a different server machine that host multiple services to avoid concurrency issues.
        - _serviceUri: wcfcoresrv2.cloudapp.net/WcfService$(_WcfPRServiceId)
        # For PR and CI test runs we need to update the Service being used by Scenario tests.
        # Used in UpdatePRService.yml
        # I think this can be removed based on the logic, setting it to true for now.
        - _updateService: true

    # Send to Helix variables
    - _xUnitPublishTargetFramework: netcoreapp2.1
    - _xUnitRuntimeTargetFramework: netcoreapp2.0
    - _xUnitRunnerVersion: 2.4.1
    - _dotNetCliPackageType: runtime
    # The version of dotnet for running the tests as listed in the global.json
    # Must be a version listed in https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases.json
    - _dotNetCliVersion: 2.1.9
    - _xUnitWorkItemTimeout: '00:10:00'

    steps:
    - checkout: self
      clean: true
    - ${{ if eq(parameters.isOfficialBuild, 'false') }}:
      - template: /eng/pipelines/UpdatePRService.yml
        parameters:
          wcfPRServiceId: $(_WcfPRServiceId)
    - ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
      - script: eng\common\cibuild.cmd
          -configuration $(_BuildConfig)
          -preparemachine
          $(_InternalBuildArgs)
          $(_TestArgs)
          /p:Test=false
        displayName: Windows Build / Publish

      - powershell: eng\common\build.ps1
          -configuration $(_BuildConfig)
          -preparemachine
          -ci
          -test
          -integrationTest
          -projects $(Build.SourcesDirectory)/eng/SendToHelix.proj
          /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
        displayName: Windows - Run Helix Tests
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          HelixAccessToken: $(HelixApiAccessToken)
              
          # Not Used The Same In Arcade #
          XUnitPublishTargetFramework: $(_xUnitPublishTargetFramework) #this is the framework your test projects are targeting
          XUnitRuntimeTargetFramework: $(_xUnitRuntimeTargetFramework) #this is the framework version of xUnit you want to use from the xUnit NuGet package
          XUnitRunnerVersion: $(_xUnitRunnerVersion) #the version of the xUnit nuget package you want to use
          IncludeDotNetCli: true
          DotNetCliPackageType: $(_dotNetCliPackageType)
          DotNetCliVersion: $(_dotNetCliVersion)
          EnableXUnitReporter: true
          XUnitWorkItemTimeout: $(_xUnitWorkItemTimeout)

    - ${{ if ne(variables['Agent.OS'], 'Windows_NT') }}:
      - script: ./eng/common/cibuild.sh
          --configuration $(_BuildConfig)
          --preparemachine
          /p:Test=false
        displayName: Unix Build / Publish

      - script: ./eng/common/build.sh
          --configuration $(_BuildConfig)
          --preparemachine
          --ci
          --test
          --integrationTest
          --projects $(Build.SourcesDirectory)/eng/SendToHelix.proj
          /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
        displayName: Unix - Run Helix Tests
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          HelixAccessToken: $(HelixApiAccessToken)

          # Not Used The Same In Arcade #
          XUnitPublishTargetFramework: $(_xUnitPublishTargetFramework) #this is the framework your test projects are targeting
          XUnitRuntimeTargetFramework: $(_xUnitRuntimeTargetFramework) #this is the framework version of xUnit you want to use from the xUnit NuGet package
          XUnitRunnerVersion: $(_xUnitRunnerVersion) #the version of the xUnit nuget package you want to use
          IncludeDotNetCli: true
          DotNetCliPackageType: $(_dotNetCliPackageType)
          DotNetCliVersion: $(_dotNetCliVersion)
          EnableXUnitReporter: true
          XUnitWorkItemTimeout: $(_xUnitWorkItemTimeout)
          ServiceHost: $(_serviceUri) #Used in SendToHelix project for a Helix pre-command, non-Windows only.
